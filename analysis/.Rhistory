str(df)
source('~/code/Python/breachlevelindex/test.R', echo=TRUE)
df
source('~/code/Python/breachlevelindex/test.R', echo=TRUE)
df
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
month.df
#Reshape to wide format
month.df = month.df %>%
arrange(Month, Type)
month.df = data.frame(month.df)
var.df = reshape(month.df, direction = "wide",
v.names = c("Records", "Incidents"),
idvar = "Month",
timevar = "Type")
View(var.df)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
View(var.df)
View(var.df)
X = var.df[,grep("^Incidents.", names(var.df))]
X = as.matrix(var.df[,grep("^Incidents.", names(var.df))])
X
library(vars)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
summary(m)
source('~/code/Python/breachlevelindex/plot.R', echo=TRUE)
irf(m)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
irf(m)
irf(m, impulse = Incidents.Account.Access)
irf(m, impulse = "Incidents.Account.Access")
m$varresult
m$varresult$Incidents.Account.Access
m$varresult$Incidents.Existential.Data
m$varresult$Incidents.Existential.Data$coefficients
m$varresult$Incidents.Existential.Data$coefficients["sd1"]
var.names = colnames(X)
m$varresult[["Incidents.Existential.Data"]]
v = var.names[1]
m$varresult[[v]]["const"]
v
m$varresult[[v]]
m$varresult
v
m$datamat
colnames(m$datamat()
)
colnames(m$datamat)
colnames(m$y)
var.names = colnames(m$y)
v = var.names[1]
m$varresult[[v]]["const"]
m$varresult[[v]]$coefficients["const"]
#Plot results
#Seasonality
season.vars = paste0("sd", 1:11, collapse = "")
#Plot results
#Seasonality
season.vars = paste0("sd", 1:11)
m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0)
m$varresult[[v]]$coefficients["const"]
lapply(var.names, function(v) m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0))
Reduce(lapply(var.names, function(v) m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0)), cbind)
Reduce(cbind, lapply(var.names, function(v) m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0)))
season.est = Reduce(cbind, lapply(var.names, function(v) m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0)))
season.est = as.data.frame(Reduce(cbind, lapply(var.names, function(v) m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0))))
names(season.est) = var.names
season.df = as.data.frame(Reduce(cbind, lapply(var.names, function(v) m$varresult[[v]]$coefficients["const"] + c(m$varresult[[v]]$coefficients[season.vars], 0))))
names(season.df) = var.names
months
months(1)
months
month.abb
month.name
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
season.df
reshape(season.df, direction = "long",
varying = var.names)
reshape(season.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names))
reshape(season.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names),
v.names = "Incidents")
reshape(season.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names),
v.names = "Incidents",
ids = season.df$Month)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
plot.df
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
plot.df
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
plot.df
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
str(plot.df)
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + theme_bw()
ggplot(plot.df, aes(Month, Incidents, group = Type)) + geom_line(aes(color = Type)) + theme_bw()
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
#IRFs
irf.results = irf(m, n.ahead = 12)
as.matrix(irf.results$irf)
irf.df = reduce(cbind, lapply(var.names, function(v) irf.results$irf[[v]]))
irf.df = Reduce(cbind, lapply(var.names, function(v) irf.results$irf[[v]]))
irf.df
irf.df = as.data.frame(Reduce(cbind, lapply(var.names, function(v) irf.results$irf[[v]])))
irf.df
names(irf.df)
irf.df$Incidents.Nuisance
irf.df$Incidents.Nuisance.2
irf.df$Incidents.Nuisance.1
confint(m)
summary(m)
m$varresult$Incidents.Account.Access
confintm$varresult$Incidents.Account.Access
confint(m$varresult$Incidents.Account.Access)
irf.df = lapply(var.names, function(v) irf.results$irf[[v]])
irf.df[[1]]
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
irf.list[[1]]
str(irf.list[[1]])
irf.list = lapply(var.names, function(v) as.data.frame(irf.results$irf[[v]]))
irf.list[[1]]
irf.list = lapply(var.names, function(v) cbind(as.data.frame(irf.results$irf[[v]]), impulse.var = v))
irf.list[[1]]
irf.list[[2]]
season.df
v = var.names[1]
irf.results$irf[[v]]
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
irf.df
plot.df = reshape(irf.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names),
v.names = "Incidents")
plot.df
plot.df = reshape(irf.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names),
v.names = "Incidents")[,-4]
names(plot.df) = c("Impulse", "Month", "Type", "Incidents")
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + facet_grid(~ Impulse)
plot.df
ggplot(subset(plot.df, Impulse == "Incidents.Account.Access"), aes(Month, Incidents)) + geom_line(aes(color = Type))
subset(plot.df, Impulse == "Incidents.Account.Access")
plot.df = reshape(irf.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names),
v.names = "Incidents")[,-4]
plot.df
plot.df = reshape(irf.df, direction = "long",
varying = var.names,
times = sub("^Incidents.", "", var.names),
v.names = "Incidents")[,-5]
names(plot.df) = c("Impulse", "Month", "Type", "Incidents")
ggplot(subset(plot.df, Impulse == "Incidents.Account.Access"), aes(Month, Incidents)) + geom_line(aes(color = Type))
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + facet_grid(~ Impulse)
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + facet_grid(Impulse ~ .)
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + facet_grid(~ Impulse, scales = "free")
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + facet_grid(~ Impulse, scales = "free_y")
ggplot(plot.df, aes(Month, Incidents)) + geom_line(aes(color = Type)) + facet_wrap(~ Impulse, scales = "free_y")
irf.results
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
temp.df
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_area(aes(ymin = Lower, ymax = Upper))
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
head(plot.df)
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper))
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper)) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(group = Type, color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper)) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper, group = Type)) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper, color = Type)) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper, fill = Type)) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper, fill = Type), alpha = 0.1) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
geom_ribbon(aes(ymin = Lower, ymax = Upper, fill = Type), alpha = 0.25) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
ggplot(plot.df, aes(Month, Incidents)) +
geom_line(aes(color = Type)) +
# geom_ribbon(aes(ymin = Lower, ymax = Upper, fill = Type), alpha = 0.25) +
facet_wrap(~ Impulse, scales = "free_y") +
theme_bw()
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
s = summary(m)
s$corres
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
help(package = "vars")
z = VARselect(X, lag.max = 5, season = 12)
z
z = VARselect(X, lag.max = 10, season = 12)
z
VARselect(X, lag.max = 6, season = 12)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
source('~/code/Python/breachlevelindex/var.R', echo=TRUE)
summary(m)
summary(m)$corres
source('~/code/Python/breachlevelindex/plot.R', echo=TRUE)
names(df)
df %>% group_by(Industry) %>% summarize(Records = sum(Records))
df %>% group_by(Industry) %>% summarize(Records = sum(Records, na.rm = T))
df %>% group_by(Industry) %>% summarize(Records = sum(Records, na.rm = T))
df %>% group_by(Industry) %>% summarize(Records = sum(as.numeric(Records), na.rm = T))
df %>% group_by(Industry) %>% filter(Industry %in% c("Technology", "Retail", "Education", "Government", "Financial", "Healthcare")) %>% summarize(Records = sum(as.numeric(Records), na.rm = T))
df %>% group_by(Industry) %>% filter(Industry %in% c("Technology", "Retail", "Education", "Government", "Financial", "Healthcare")) %>% summarize(Records = sum(as.numeric(Records), na.rm = T)) %>% ungroup() %>% mutate(Percent = Records / sum(Records))
df %>% group_by(Industry) %>% filter(Industry %in% c("Technology", "Retail", "Education", "Government", "Financial", "Healthcare")) %>% summarize(Records = sum(as.numeric(Records), na.rm = T)) %>% ungroup() %>% mutate(Percent = Records / sum(Records) * 100)
unique(df$Source)
df %>% group_by(Source) %>% filter(Source != "Unknown") %>% summarize(Records = sum(as.numeric(Records), na.rm = T)) %>% ungroup() %>% mutate(Percent = Records / sum(Records) * 100)
df %>% group_by(Source) %>% filter(Source != "Unknown") %>% summarize(Records = sum(as.numeric(Records), na.rm = T)) %>% ungroup() %>% mutate(Percent = round(Records / sum(Records) * 100, 2))
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
# X.range = apply(X, 2, range)
# X.seq = lapply(1:ncol(X.range), function(i) seq(X.range[1,i], X.range[2,i], length.out = N.fit))
# X.seq = lapply(X.seq, function(v) v[-c(1, N.fit)])
# X.fit = as.matrix(do.call(expand.grid, X.seq))
frontier = fit.frontier.grad(X, y, X.fit, method = "m", H.mult = 5)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
(4 / 7)^(1/9)
(4 / 7)^(1/9) * 7^(-1/9)
1.06 * 7^(1/5)
1.06 * 7^(-1/5)
7^(-1/9)
library(ks)
data(faithful)
H = Hpi(x = faithful)
H
H = Hpi(x = X)
X
remove.packages("mvnpbr")
setwd("~/code/R/smoothing/npbr")
install.packages("mvnpbr.tar.gz", repos = NULL, type = "source")
install.packages("mvnpbr.tar.gz", repos = NULL, type = "source")
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
X
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
library(rDEA)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
#Concavity, doesn't work for any tested H.mult
dea.result = dea(X, y, X, y, model = "output")
dea.result$thetaOpt
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/dea.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/dea.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
allocation.df$allocation.cars
results.df
results.df$allocation.cars
m.year.capital = lm(log(allocation.capital) ~ factor(year) + 0, results.df)
m.year.cars = lm(log(allocation.cars) ~ factor(year) + 0, results.df)
log(results.df$allocation.cars)
X.scale
df.year[,price.vars] / df[,output.price]
df[,output.price]
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
df.year[,price.vars]
df.year[,output.price]
df.year[,price.vars] / df.year[,output.price]
0.1083433 / 0.02992228
3044.039 / 0.02992228
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
df.year[,price.vars]
df.year * X.scale
df.year[,price.vars] * X.scale
X.scale
X.scale = apply(df[,indep.vars], 2, mean)
y.scale = mean(df$revenue.ton.miles)
df.year[,price.vars] * X.scale
df.year[,price.vars] * t(X.scale)
df.year[,price.vars] * t(t(X.scale))
t(t(df.year[,price.vars]) * X.scale)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
X.scale
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
H = Hpi(x = X)
X
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
var X
var(X)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
var(X)
solve(var(X))
m = matrix(runif(9), nrow = 3)
solve(m)
solve(m / 10) / 10
solve(X / mean(X)) / mean(X)
m = var(X)
solve(m / mean(m)) / mean(m)
m / mean(m)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
H = var(X) * N^(-2 / (k + 4))
solve(H)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
frontier$gradient.hat
solve(H)
H
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
frontier$gradient.hat
H
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
H
solve(H)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
H
solve(H)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
solve(H)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
results.df$allocation.locomotives
head(results.df)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
results.df
results.df$allocation.locomotives
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
rm(list = ls())
source('~/code/R/smoothing/npbr/mvnpbr_20180124/R/fit.frontier.grad.R', echo=TRUE)
source('~/code/R/smoothing/npbr/functions_20180124.R', echo=TRUE)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
X
dim(X)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
X.fit
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
stopifnot(method %in% c("u", "m", "mc")) #(u)nconstrained, (m)onotonically increasing, (c)oncave
if (any(is.na(X.fit))){
X.fit = X
} else{
X.fit = X.fit[!duplicated(X.fit),]
X = X[!duplicated(X),]
X.fit = rbind(X, X.fit)
X.fit = X.fit[!duplicated(X.fit),]
}
#Rule of thumb:
if (any(is.na(H.inv))){
# print(H.mult)
H.diag = apply(X, 2, function(col) H.mult * (1.06 * sd(col) * nrow(X)^(-1/5))^2)
if (ncol(X) > 1){
H = diag(H.diag)
} else{
H = diag(1) * H.diag
}
H.inv = solve(H)
}
N = nrow(X)
N.fit = nrow(X.fit)
k = ncol(X)
#Bounding constraints:
K = apply(X, 1, function(X.0) apply(X, 1, function(X.i) kernel.func(X.0, X.i, H.inv)))
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
stopifnot(method %in% c("u", "m", "mc")) #(u)nconstrained, (m)onotonically increasing, (c)oncave
if (any(is.na(X.fit))){
X.fit = X
} else{
X.fit = X.fit[!duplicated(X.fit),]
X = X[!duplicated(X),]
X.fit = rbind(X, X.fit)
X.fit = X.fit[!duplicated(X.fit),]
}
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
X.fit = X.fit[!duplicated(X.fit),]
X.fit = X.fit[!duplicated(X.fit),,drop = FALSE]
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
setwd("~/code/R/smoothing/npbr/mvnpbr_20180124/R")
setwd("~/code/R/smoothing/npbr")
remove.packages("mvnpbr")
install.packages("mvnpbr.tar.gz", repos = NULL, type = "source")
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_relative.R', echo=TRUE)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
X.fit = X.fit[!duplicated(X.fit),,drop = FALSE]
X.fit = X.fit[!duplicated(X.fit),,drop = FALSE]
X = X[!duplicated(X),,drop = FALSE]
X.fit = rbind(X, X.fit)
X.fit = X.fit[!duplicated(X.fit),,drop = FALSE]
m = matrix(c(1, 2, 3))
m = matrix(c(1, 2, 3,))
m = matrix(c(1:3, 4:6, 1:3), nrow = 3)
m
m = matrix(c(1:3, 4:6, 1:3), nrow = 3, byrow = T)
m = matrix(c(1:3, 4:6, 1:3), nrow = 3, byrow = T)
m
duplicated(m)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
X.fit = X.fit[!duplicated(X.fit),,drop = FALSE]
X = X[!duplicated(X),,drop = FALSE]
rbind(X, X.fit)
duplicated(rbind(X, X.fit))
X.fit = rbind(X, X.fit)
X.fit = X.fit[!duplicated(X.fit),,drop = FALSE]
N.fit
N = nrow(X)
N.fit = nrow(X.fit)
k = ncol(X)
source('~/code/R/smoothing/npbr/test.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/R/npbr_plot.R', echo=TRUE)
source('~/docs/NPBR_paper/R/npbr_plot.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
m.firm.capital
m.firm.capital$residuals
year.cor = cor(firm.residuals)
#Cross equation correlations:
firm.residuals = cbind(m.firm.capital$residuals,
m.firm.cars$residuals,
m.firm.locomotives$residuals,
m.firm.fuel$residuals,
m.firm.labor$residuals)
year.residuals = cbind(m.firm.capital$residuals,
m.firm.cars$residuals,
m.firm.locomotives$residuals,
m.firm.fuel$residuals,
m.firm.labor$residuals)
firm.cor = cor(firm.residuals)
firm.cor
year.cor = cor(year.residuals)
rownames(firm.cor) = colnames(firm.cor) = indep.vars
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
source('~/docs/NPBR_paper/analysis/analysis_absolute.R', echo=TRUE)
install.packages("xtable")
setwd("~/docs/NPBR_paper/analysis")
source('~/docs/NPBR_paper/analysis/descriptiveStatistics.R', echo=TRUE)
head(raw.data)
head(df)
source('~/docs/NPBR_paper/analysis/descriptiveStatistics.R', echo=TRUE)
