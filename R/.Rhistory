#Reflect data for fitting
reflected.data = reflect.data(X, y)
X.eval = reflected.data$X
y.eval = reflected.data$y
plot(X ~ y)
set.seed(0)
engel = engel[sample(nrow(engel), 100),]
X = as.matrix(engel$income)
y = engel$foodexp
plot(X ~ y)
nrow(engel)
data("engel")
set.seed(0)
engel = engel[sample(nrow(engel), 100),]
X = as.matrix(engel$income)
y = engel$foodexp
plot(X ~ y)
N.fit = 250
X.fit = as.matrix(seq(min(X), max(X), length.out = N.fit))
#Reflect data for fitting
reflected.data = reflect.data(X, y)
X.eval = reflected.data$X
y.eval = reflected.data$y
#Other variables
X.bounded = X
y.bounded = y
X.constrained = X.fit
method = "u"
H.inv = NA
H.mult = 1
y.fit.observed = NA
#Fit frontiers
frontier.u = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "u")
frontier.m = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "m")
frontier.u$y.fit
#Plot results
library(ggplot2)
frontier.df = data.frame(income = rep(X.fit, times = 2),
foodexp = c(frontier.u$y.fit, frontier.m$y.fit),
model = rep(c("u", "m"), each = N.fit))
ggplot(engel, aes(income, foodexp)) +
geom_point() +
geom_line(data = frontier.df, aes(color = model))
source('~/docs/NPBR_paper/R/npbr_plot.R', echo=TRUE)
save(df, "univariate.RData")
save(df, file = "univariate.RData")
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/genData.R', echo=TRUE)
source('~/docs/NPBR_paper/R/npbr_plot.R', echo=TRUE)
data$x
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
load("C:/Users/tmcken/Documents/code/R/smoothing/npbr/mvnpbr_package/mvnpbr/data/univariate.RData")
rm(list = ls())
load("C:/Users/tmcken/Documents/code/R/smoothing/npbr/mvnpbr_package/mvnpbr/data/univariate.RData")
getwd()
univariate = df
save(univariate, file = "data/univariate.RData")
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
rm(list = ls)
rm(list = ls())
library(mvnpbr)
univariate
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
?mvnpbr::univariate
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
?mvnpbr::univariate
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
?mvnpbr::univariate
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
?mvnpbr::univariate
library(mvnpbr)
data(univariate)
X = as.matrix(univariate$x)
data(univariate)
#Set up data for fitting
X = as.matrix(univariate$x)
y = univariate$y
N.fit = 250
X.fit = as.matrix(seq(min(X), max(X), length.out = N.fit))
#Reflect data for fitting
reflected.data = reflect.data(X, y)
X.eval = reflected.data$X
y.eval = reflected.data$y
#Other variables
X.bounded = X
y.bounded = y
X.constrained = X.fit
method = "u"
H.inv = NA
H.mult = 1
y.fit.observed = NA
#Fit frontiers
frontier.u = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "u")
frontier.m = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "m")
frontier.mc = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "mc")
#Plot results
library(ggplot2)
frontier.df = data.frame(X = rep(X.fit, times = 3),
y = c(frontier.u$y.fit, frontier.m$y.fit, frontier.mc$y.fit),
model = rep(c("u", "m", "mc"), each = N.fit))
ggplot(univariate, aes(X, y)) +
geom_point() +
geom_line(data = frontier.df, aes(color = model))
slope.df = data.frame(X = rep(X.fit, times = 3),
slope = c(frontier.u$gradient.fit, frontier.m$gradient.fit, frontier.mc$gradient.fit),
model = rep(c("u", "m", "mc"), each = N.fit))
ggplot(slope.df, aes(X, slope)) +
geom_line(aes(color = model))
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
library(mvnpbr)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
library(mvnpbr)
?fit.frontier
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
library(mvnpbr)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
library(mvnpbr)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
?fit.frontier
rm(list = ls())
data(univariate)
#Set up data for fitting
X = as.matrix(univariate$x)
y = univariate$y
N.fit = 250
X.fit = as.matrix(seq(min(X), max(X), length.out = N.fit))
#Reflect data for fitting
reflected.data = reflect.data(X, y)
X.eval = reflected.data$X
y.eval = reflected.data$y
#Fit frontiers
frontier.u = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "u")
frontier.m = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "m")
frontier.mc = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "mc")
#Plot frontier
library(ggplot2)
frontier.df = data.frame(X = rep(X.fit, times = 3),
y = c(frontier.u$y.fit, frontier.m$y.fit, frontier.mc$y.fit),
model = rep(c("u", "m", "mc"), each = N.fit))
ggplot(univariate, aes(X, y)) +
geom_point() +
geom_line(data = frontier.df, aes(color = model))
#Plot slopes
slope.df = data.frame(X = rep(X.fit, times = 3),
slope = c(frontier.u$gradient.fit, frontier.m$gradient.fit, frontier.mc$gradient.fit),
model = rep(c("u", "m", "mc"), each = N.fit))
ggplot(slope.df, aes(X, slope)) +
geom_line(aes(color = model))
setwd("~/docs/NPBR_paper/R")
rm(list = ls())
USMacro = read.csv("gdpData.csv")
USMacro
save(USMacro, file = "USMacro.RData")
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
USMacro
?mvnpbr::USMacro
data(USMacro)
X = as.matrix(USMacro[,c("K", "L")])
head(USMacro)
y = USMacro$Y
#Reflect data for fitting
reflected.data = reflect.data(X, y)
X.eval = reflected.data$X
library(mvnpbr)
reflected.data = reflect.data(X, y)
X.eval = reflected.data$X
y.eval = reflected.data$y
X.eval
frontier.u = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X.fit,
X.fit = X.fit,
method = "u")
frontier.u = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X,
X.fit = X,
method = "u")
frontier.m = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X,
X.fit = X,
method = "m")
frontier.mc = fit.frontier(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X,
X.fit = X,
method = "mc")
frontier.u$y.fit
frontier.m$y.fit
frontier.mc$y.fit
fit.mc = fit.mean(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X,
X.fit = X,
method = "mc")
fit.mc = fit.mean(X.eval, y.eval,
X.bounded = X, y.bounded = y,
X.constrained = X,
X.fit = X,
method = "mc")
fit.mc = fit.mean(X.eval, y.eval,
X.constrained = X,
X.fit = X,
method = "mc")
fit.mc$y.fit
fit.mc$gradient.fit
plot.df = data.frame(Year = rep(df$t, times = 2),
Productivity = c(fit.mc$gradient.fit[,1], fit.mc$gradient.fit[,2]),
Variable = rep(c("Capital", "Labor"), each = nrow(USMacro)))
plot.df = data.frame(Year = rep(USMacro$t, times = 2),
Productivity = c(fit.mc$gradient.fit[,1], fit.mc$gradient.fit[,2]),
Variable = rep(c("Capital", "Labor"), each = nrow(USMacro)))
library(ggplot2)
/facet_wrap
?facet_wrap
ggplot(plot.df, aes(Year, Productivity)) +
geom_line() +
facet_wrap(~ Variable, scales = "free_y)
)
""
"
ggplot(plot.df, aes(Year, Productivity)) +
geom_line() +
facet_wrap(~ Variable, scales = "free_y")
facet_wrap(Variable ~ ., scales = "free_y")
ggplot(plot.df, aes(Year, Productivity)) +
geom_line() +
facet_wrap(Variable ~ ., scales = "free_y")
ggplot(plot.df, aes(Year, Productivity)) +
geom_line() +
facet_grid(Variable ~ ., scales = "free_y")
?fit.sf
X = as.matrix(USMacro[,c("K", "L")])
y = USMacro$Y
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "mc")
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "m")
fit.sf$mean.efficiency
fit.sf$mode.efficiency
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "u")
fit.sf$mean.efficiency
X = as.matrix(univariate$x)
y = univariate$y
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "u")
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "m")
X = as.matrix(USMacro[,c("K", "L")])
y = USMacro$Y
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "m")
X.constrained = apply(X, 2, function(col) seq(min(col), max(col), length.out = 100))
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "m")
fit.sf$mean.efficiency
X.constrained = apply(X, 2, function(col) seq(min(col), max(col), length.out = 500))
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "m")
fit.sf
fit.sf$mean.efficiency
X.constrained = apply(X, 2, function(col) seq(min(col), max(col), length.out = 1000))
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "m")
print(fit.sf$mean.efficiency)
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "mc")
X = as.matrix(log(USMacro[,c("K", "L")]))
y = log(USMacro$Y)
#Constrained points
X.constrained = apply(X, 2, function(col) seq(min(col), max(col), length.out = 1000))
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "mc")
print(fit.sf$mean.efficiency)
ggplot(plot.df, aes(Year, Efficiency)) +
geom_line()
plot.df = data.frame(Year = USMacro$t,
Efficiency = fit.sf$mode.efficiency)
ggplot(plot.df, aes(Year, Efficiency)) +
geom_line()
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "m")
print(fit.sf$mean.efficiency)
#Plot efficiency over time
library(ggplot2)
plot.df = data.frame(Year = USMacro$t,
Efficiency = fit.sf$mode.efficiency)
ggplot(plot.df, aes(Year, Efficiency)) +
geom_line()
X.constrained = X
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X.constrained,
method = "mc")
print(fit.sf$mean.efficiency)
#Plot efficiency over time
library(ggplot2)
plot.df = data.frame(Year = USMacro$t,
Efficiency = fit.sf$mode.efficiency)
ggplot(plot.df, aes(Year, Efficiency)) +
geom_line()
data(USMacro)
#Extract data
X = as.matrix(log(USMacro[,c("K", "L")]))
y = log(USMacro$Y)
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "mc")
print(fit.sf$mean.efficiency)
#Plot efficiency over time
library(ggplot2)
plot.df = data.frame(Year = USMacro$t,
Efficiency = fit.sf$mode.efficiency)
ggplot(plot.df, aes(Year, Efficiency)) +
geom_line()
X.reflected = reflected.data$X
y.reflected = reflected.data$y
data(univariate)
X = as.matrix(univariate$x)
y = univariate$y
reflected.data = reflect.data(X, y)
X.reflected = reflected.data$X
y.reflected = reflected.data$y
plot.df = data.frame(X = X.reflected,
y = y.reflected,
data = rep(c("reflected", "actual", "reflected"), each = nrow(X)))
ggplot(plot.df, aes(X, y)) +
geom_point(aes(color = data))
X = as.matrix(USMacro[,c("K", "L")])
H.inv.select(X)
H.inv.select(X)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
data(USMacro)
library(mvnpbr)
data(USMacro)
#Extract data
X = as.matrix(USMacro[,c("K", "L")])
#Generate bandwidth matrix
H.inv.select(X)
print(H.inv.select(X))
help(package = "mvnpbr")
data(USMacro)
#Extract data
X = as.matrix(log(USMacro[,c("K", "L")]))
y = log(USMacro$Y)
#Fit frontier
fit.sf = fit.sf(X, y,
X.constrained = X,
method = "mc")
print(fit.sf$mean.efficiency)
data(USMacro)
#Extract data
X = as.matrix(USMacro[,c("K", "L")])
#Generate bandwidth matrix
print(H.inv.select(X))
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
library(mvnpbr)
help(package = "mvnpbr")
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
help(package = "mvnpbr")
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
install.packages("Rdpack")
source('~/code/R/smoothing/npbr/mvnpbr_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/mvnpbr_package/reinstall.R', echo=TRUE)
library(mvnpbr)
?H.inv.select
install.packages("wordnet")
library(wordnet)
install.packages("qdapDictionaries")
library(qdapDictionaries)
rm(list = ls())
head(strong.words)
grep("nea", strong.words, value = T)
help(package = "qdpDictionaries")
help(package = "qdpDictionaries")
?strong.words
grep("nea", DICTIONARY$word, value = T)
remove.packages("mvnpbr")
source('~/code/R/smoothing/npbr/NEAR_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/reinstall.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/reinstall.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/reinstall.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/reinstall.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/document.R', echo=TRUE)
source('~/code/R/smoothing/npbr/NEAR_package/reinstall.R', echo=TRUE)
library(NEAR)
help(package = "NEAR")
library(qdapDictionaries)
grep("snea", DICTIONARY$word)
grep("snea", DICTIONARY$word, value = T)
help(package = "qdapDictionaries")
emoticon
grep("snea", adverb, value = T)
adverb
adverb$V1
grep("snea", adverb$V1, value = T)
grep("snea", action.verbs, value = T)
grep("snea", abbreviations, value = T)
grep("snea", amplification.words, value = T)
grep("snea", contractions, value = T)
grep("snea", deamplification.words, value = T)
grep("snea", function.words, value = T)
grep("snea", negation.words, value = T)
grep("snea", negative.words, value = T)
grep("snea", positive.words, value = T)
grep("snea", power.words, value = T)
grep("snea", preposition, value = T)
grep("snea", strong.words, value = T)
grep("snea", submit.words, value = T)
grep("snea", weak, value = T)
grep("snea", weak.words, value = T)
grep("ne", DICTIONARY$word, value = T)
grep("^ne", DICTIONARY$word, value = T)
grep("stae", DICTIONARY$word, value = T)
grep("satee", DICTIONARY$word, value = T)
grep("sate", DICTIONARY$word, value = T)
grep("smate", DICTIONARY$word, value = T)
grep("seate", DICTIONARY$word, value = T)
grep("ks$", DICTIONARY$word, value = T)
grep("ksate", DICTIONARY$word, value = T)
help(package = "NEAR")
remove.packages("mvnpbr")
setwd("~/code/R/snfa_package")
source('~/code/R/snfa_package/reinstall.R', echo=TRUE)
install.packages("devtools")
source('~/code/R/snfa_package/reinstall.R', echo=TRUE)
source('~/docs/SNFA_paper/R/snfa_plot.R', echo=TRUE)
